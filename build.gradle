group 'eu.thijslemmens'
version '1.0-SNAPSHOT'

buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'com.bmuschko:gradle-docker-plugin:3.6.0'
        classpath "com.avast.gradle:gradle-docker-compose-plugin:0.8.4"
    }
}

apply plugin: 'scala'
apply plugin: 'idea'
apply plugin: 'application'
apply plugin: com.bmuschko.gradle.docker.DockerRemoteApiPlugin
apply plugin: 'docker-compose'

docker {
    registryCredentials {
        username = System.getenv("DOCKER_USER")
        password = System.getenv("DOCKER_PASSWORD")
    }
}

sourceSets {
    integrationTest {
        scala {
            srcDir 'src/integration-test/scala'
        }
    }
}


sourceCompatibility = 1.8

repositories {
    mavenCentral()
    jcenter()
}

dependencies {
    compile 'org.scala-lang:scala-library:2.12.3'
    compile group: 'com.typesafe.akka', name: 'akka-actor_2.12', version: '2.5.6'
    compile group: 'com.typesafe.akka', name: 'akka-stream_2.12', version:'2.5.6'
    compile 'com.github.mauricio:postgresql-async_2.12:0.2.21'
    testCompile 'org.scalatest:scalatest_2.12:3.0.4'
    testCompile group: 'com.typesafe.akka', name: 'akka-testkit_2.12', version: '2.5.6'
    testCompile 'org.scalamock:scalamock_2.12:4.0.0'
    testCompile 'junit:junit:4.12'

    integrationTestCompile configurations.testCompile
    integrationTestCompile group: 'org.postgresql', name: 'postgresql', version: '42.1.4'
    integrationTestRuntime configurations.testRuntime
}

mainClassName = 'eu.thijslemmens.carbonpostgres.Main'

import com.bmuschko.gradle.docker.tasks.image.*

task prepareDockerBuild(type: Copy){
    dependsOn installDist

    from 'src/main/docker'
    from installDist.destinationDir.parent
    into "$buildDir/docker"
}

def imageName = 'thijslemmens/carbon-postgres'
def imageTag = 'wip'

task buildDockerImage(type: DockerBuildImage){
    dependsOn prepareDockerBuild
    inputDir = project.file("$buildDir/docker")
    buildArgs = ['PROJECT_NAME': installDist.destinationDir.name]
    tag = "$imageName:$imageTag"

    doLast {
        project.extensions.getByName('dockerCompose').environment.put('DOCKER_IMAGE', imageId)
    }

}

task pushDockerImage(type: DockerPushImage){
    dependsOn buildDockerImage
    pushDockerImage.imageName = imageName
    tag = imageTag
}

dockerCompose {
    useComposeFiles = ['src/main/docker-compose/docker-compose.yml']
    projectName = project.name
}

composeUp.dependsOn(buildDockerImage)

task integrationTest(type: Test) {
    dependsOn(composeUp)

    testClassesDirs = sourceSets.integrationTest.output.classesDirs
    classpath = sourceSets.integrationTest.runtimeClasspath

    outputs.upToDateWhen {false}

    //getting the port info
    doFirst {
        def cpServiceInfo = composeUp.getServicesInfos().get("carbon-postgres")
        systemProperty("tcp.host", cpServiceInfo.host)
        systemProperty("tcp.port", cpServiceInfo.port)

        def tsServiceInfo = composeUp.getServicesInfos().get("timescaledb")
        systemProperty("timescaledb.host", tsServiceInfo.host)
        systemProperty("timescaledb.port", tsServiceInfo.port)
    }

    finalizedBy {
        composeDown
    }
}

test {
    outputs.upToDateWhen {false}
}

